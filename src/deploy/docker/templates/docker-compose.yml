version: "3.7"

services:
  application:
    container_name: ${_Values_root_name}-application
    image:  ${_Values_image_repository}${_Values_image_native}:${_Values_image_tag}
    restart: 'no'
    ports:
      - "${_Values_service_port}:${_Values_service_port}"
    command: ["-Xmx${_Values_resources_requests_memory}"]

#    we cannot active the healthcheck because base native images does not have curl
#    healthcheck:
#      test: "curl -f http://localhost:${_Values_service_port}/actuator/health || exit 1"
#      interval: 10s
#      timeout: 10s
#      retries: 5
    volumes:
      - tmp:/tmp
      - applogs:/usr/share/logs
    networks:
      - ${_Values_root_name}-net
    environment:
      #application
      TZ: Europe/Berlin
      server.port: "${_Values_service_port}"
      server.tomcat.threads.max: "20"
      server.forward-headers-strategy: FRAMEWORK

      #security
      security.authentication.enabled: "false"

      #monitoring
      management.endpoint.health.show-details: always
      management.endpoints.web.exposure.include: "health,heapdump,circuitbreakers,prometheus"

      #zipkin/jaeger
      spring.application.name: "person-service"
      management.zipkin.tracing.endpoint: "http://${_Values_host_docker_internal}:9411/api/v2/spans"
      management.tracing.sampling.probability: "1.0"
      management.tracing.enabled: "true"

      #persistence
      spring.datasource.url: "jdbc:postgresql://postgres:5432/person"
      spring.datasource.hikari.maximum-pool-size: "10"
      spring.datasource.hikari.connection-timeout: "10000"

      database.provisioning.goals: "-import-demo-data"

      #adapter
      adapter.calleeservice.url: "http://${_Values_host_docker_internal}:50900"
      adapter.calleeservice.timeout: "10000"

      #secrets
      spring.datasource.username: "person-service"
      spring.datasource.password: "person-service"

      adapter.calleeservice.user: "YWRtaW4="
      adapter.calleeservice.password: "YWRtaW4="

      #log levels
      logging.level.root: "WARN"
      logging.level.org.goafabric: "INFO"
      logging.level.org.springframework: "INFO"
      logging.level.org.flywaydb.core: "INFO"
      logging.level.org.hibernate.SQL: "INFO"

    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    container_name: ${_Values_root_name}-postgres
    image: postgres:15.1
    restart: 'no'
    ports:
      - 50810:5432
    environment:
      TZ: "Europe/Berlin"
      POSTGRES_DB: "person"

      #secrets
      POSTGRES_USER: "person-service"
      POSTGRES_PASSWORD: "person-service"

    command: postgres -c 'shared_buffers=64MB' -c 'max_connections=30' -c 'shared_preload_libraries=pg_stat_statements'

    healthcheck:
      test: "sh -c pg_isready"
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - ${_Values_root_name}-net

  nginx:
    container_name: ${_Values_root_name}-nginx
    image: nginx:1.22.1
    restart: 'no'
    ports:
      - 8080:80
      - 444:443
    networks:
      - ${_Values_root_name}-net
    volumes:
      - ./nginx/nginx${_Values_nginx_oauth2}.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/ssl/
    depends_on:
      application:
        condition: service_started

volumes:
    tmp:
    applogs:
    pgdata:

networks:
  person-service-net:
    driver: bridge